import cv2
import numpy as np
import os

def load_model():
    weights_path = r"D:\CODES\Python\models\yolov3.weights"
    config_path = r"D:\CODES\Python\models\yolov3.cfg"
    names_path = r"D:\CODES\Python\models\coco.names"

    print(f"Checking paths:\nWeights: {weights_path}\nConfig: {config_path}\nNames: {names_path}")

    if not os.path.exists(weights_path):
        raise FileNotFoundError(f"Model weights file not found at {weights_path}")
    if not os.path.exists(config_path):
        raise FileNotFoundError(f"Model config file not found at {config_path}")
    if not os.path.exists(names_path):
        raise FileNotFoundError(f"Class names file not found at {names_path}")

    net = cv2.dnn.readNet(weights_path, config_path)
    classes = []
    with open(names_path, "r") as f:
        classes = [line.strip() for line in f.readlines()]
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers().flatten()]
    return net, classes, output_layers

def detect_objects(img_path):
    net, classes, output_layers = load_model()
    img = cv2.imread(img_path)
    if img is None:
        print("Error: Image not found!")
        return
    height, width, channels = img.shape

    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    class_ids = []
    confidences = []
    boxes = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and class_id in [0, 2, 9]:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)
                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    font = cv2.FONT_HERSHEY_PLAIN
    colors = np.random.uniform(0, 255, size=(len(classes), 3))
    if len(indexes) > 0:
        for i in indexes.flatten():
            x, y, w, h = boxes[i]
            label = f"{classes[class_ids[i]]} {confidences[i]:.2f}"
            color = colors[class_ids[i]] 
            cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
            cv2.putText(img, label, (x, y + 30), font, 2, color, 2)

    cv2.imshow("Object Detection", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    try:
        detect_objects(r"D:\CODES\Python\test1.jpg")
    except FileNotFoundError as e:
        print(e)
